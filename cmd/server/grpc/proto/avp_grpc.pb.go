// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AVPClient is the client API for AVP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AVPClient interface {
	Signal(ctx context.Context, opts ...grpc.CallOption) (AVP_SignalClient, error)
}

type aVPClient struct {
	cc grpc.ClientConnInterface
}

func NewAVPClient(cc grpc.ClientConnInterface) AVPClient {
	return &aVPClient{cc}
}

func (c *aVPClient) Signal(ctx context.Context, opts ...grpc.CallOption) (AVP_SignalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AVP_serviceDesc.Streams[0], "/avp.AVP/Signal", opts...)
	if err != nil {
		return nil, err
	}
	x := &aVPSignalClient{stream}
	return x, nil
}

type AVP_SignalClient interface {
	Send(*SignalRequest) error
	Recv() (*SignalReply, error)
	grpc.ClientStream
}

type aVPSignalClient struct {
	grpc.ClientStream
}

func (x *aVPSignalClient) Send(m *SignalRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aVPSignalClient) Recv() (*SignalReply, error) {
	m := new(SignalReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AVPServer is the server API for AVP service.
// All implementations must embed UnimplementedAVPServer
// for forward compatibility
type AVPServer interface {
	Signal(AVP_SignalServer) error
	mustEmbedUnimplementedAVPServer()
}

// UnimplementedAVPServer must be embedded to have forward compatible implementations.
type UnimplementedAVPServer struct {
}

func (*UnimplementedAVPServer) Signal(AVP_SignalServer) error {
	return status.Errorf(codes.Unimplemented, "method Signal not implemented")
}
func (*UnimplementedAVPServer) mustEmbedUnimplementedAVPServer() {}

func RegisterAVPServer(s *grpc.Server, srv AVPServer) {
	s.RegisterService(&_AVP_serviceDesc, srv)
}

func _AVP_Signal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AVPServer).Signal(&aVPSignalServer{stream})
}

type AVP_SignalServer interface {
	Send(*SignalReply) error
	Recv() (*SignalRequest, error)
	grpc.ServerStream
}

type aVPSignalServer struct {
	grpc.ServerStream
}

func (x *aVPSignalServer) Send(m *SignalReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aVPSignalServer) Recv() (*SignalRequest, error) {
	m := new(SignalRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AVP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "avp.AVP",
	HandlerType: (*AVPServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Signal",
			Handler:       _AVP_Signal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cmd/server/grpc/proto/avp.proto",
}
